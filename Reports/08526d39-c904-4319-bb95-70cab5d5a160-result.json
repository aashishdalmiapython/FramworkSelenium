{"name": "test_TC001_Validate_Registration", "status": "broken", "statusDetails": {"message": "PermissionError: [Errno 13] Permission denied: 'Result/demo.xlsx'", "trace": "def test_TC001_Validate_Registration():\n        try:\n            x = ExcelReader.readdatafromexcel(ConfigReader.readConfigdata(\"Excel_Data_Read_Path\",\"signup_data_path\"))\n            Registration.registration(driver, x[0], x[1], x[2],\"TC001_Validate_Registration\")\n>           ExcelWrite.capture_tc_pass()\n\nTestCases\\test_TC_001_Registration.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\n    def capture_tc_pass():\n        tc_status = \"NPassed\"\n        obj_wbtestresult = openpyxl.Workbook()\n        sheettestresult = obj_wbtestresult.active\n        c1 = sheettestresult.cell(row=1, column=1)\n        c1.value = \"Registration Test\"\n        c2 = sheettestresult.cell(row=1, column=2)\n        c2.value = tc_status\n>       obj_wbtestresult.save(ConfigReader.readConfigdata(\"Test_Result_File\", \"registration\"))\n\nLibrary\\ExcelWrite.py:12: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <openpyxl.workbook.workbook.Workbook object at 0x0000027D7E5A0950>\nfilename = 'Result/demo.xlsx'\n\n    def save(self, filename):\n        \"\"\"Save the current workbook under the given `filename`.\n        Use this function instead of using an `ExcelWriter`.\n    \n        .. warning::\n            When creating your workbook using `write_only` set to True,\n            you will only be able to call this function once. Subsequent attempts to\n            modify or save the file will raise an :class:`openpyxl.shared.exc.WorkbookAlreadySaved` exception.\n        \"\"\"\n        if self.read_only:\n            raise TypeError(\"\"\"Workbook is read-only\"\"\")\n        if self.write_only and not self.worksheets:\n            self.create_sheet()\n>       save_workbook(self, filename)\n\nvenv\\Lib\\site-packages\\openpyxl\\workbook\\workbook.py:386: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nworkbook = <openpyxl.workbook.workbook.Workbook object at 0x0000027D7E5A0950>\nfilename = 'Result/demo.xlsx'\n\n    def save_workbook(workbook, filename):\n        \"\"\"Save the given workbook on the filesystem under the name filename.\n    \n        :param workbook: the workbook to save\n        :type workbook: :class:`openpyxl.workbook.Workbook`\n    \n        :param filename: the path to which save the workbook\n        :type filename: string\n    \n        :rtype: bool\n    \n        \"\"\"\n>       archive = ZipFile(filename, 'w', ZIP_DEFLATED, allowZip64=True)\n\nvenv\\Lib\\site-packages\\openpyxl\\writer\\excel.py:291: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <zipfile.ZipFile [closed]>, file = 'Result/demo.xlsx'\nmode = 'w', compression = 8, allowZip64 = True\ncompresslevel = None\n\n    def __init__(self, file, mode=\"r\", compression=ZIP_STORED, allowZip64=True,\n                 compresslevel=None, *, strict_timestamps=True, metadata_encoding=None):\n        \"\"\"Open the ZIP file with mode read 'r', write 'w', exclusive create 'x',\n        or append 'a'.\"\"\"\n        if mode not in ('r', 'w', 'x', 'a'):\n            raise ValueError(\"ZipFile requires mode 'r', 'w', 'x', or 'a'\")\n    \n        _check_compression(compression)\n    \n        self._allowZip64 = allowZip64\n        self._didModify = False\n        self.debug = 0  # Level of printing: 0 through 3\n        self.NameToInfo = {}    # Find file info given name\n        self.filelist = []      # List of ZipInfo instances for archive\n        self.compression = compression  # Method of compression\n        self.compresslevel = compresslevel\n        self.mode = mode\n        self.pwd = None\n        self._comment = b''\n        self._strict_timestamps = strict_timestamps\n        self.metadata_encoding = metadata_encoding\n    \n        # Check that we don't try to write with nonconforming codecs\n        if self.metadata_encoding and mode != 'r':\n            raise ValueError(\n                \"metadata_encoding is only supported for reading files\")\n    \n        # Check if we were passed a file-like object\n        if isinstance(file, os.PathLike):\n            file = os.fspath(file)\n        if isinstance(file, str):\n            # No, it's a filename\n            self._filePassed = 0\n            self.filename = file\n            modeDict = {'r' : 'rb', 'w': 'w+b', 'x': 'x+b', 'a' : 'r+b',\n                        'r+b': 'w+b', 'w+b': 'wb', 'x+b': 'xb'}\n            filemode = modeDict[mode]\n            while True:\n                try:\n>                   self.fp = io.open(file, filemode)\nE                   PermissionError: [Errno 13] Permission denied: 'Result/demo.xlsx'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\zipfile.py:1283: PermissionError\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_TC001_Validate_Registration():\n        try:\n            x = ExcelReader.readdatafromexcel(ConfigReader.readConfigdata(\"Excel_Data_Read_Path\",\"signup_data_path\"))\n            Registration.registration(driver, x[0], x[1], x[2],\"TC001_Validate_Registration\")\n            ExcelWrite.capture_tc_pass()\n        except:\n>           ExcelWrite.capture_tc_failed()\n\nTestCases\\test_TC_001_Registration.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nLibrary\\ExcelWrite.py:22: in capture_tc_failed\n    obj_wbtestresult.save(ConfigReader.readConfigdata(\"Test_Result_File\",\"registration\"))\nvenv\\Lib\\site-packages\\openpyxl\\workbook\\workbook.py:386: in save\n    save_workbook(self, filename)\nvenv\\Lib\\site-packages\\openpyxl\\writer\\excel.py:291: in save_workbook\n    archive = ZipFile(filename, 'w', ZIP_DEFLATED, allowZip64=True)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <zipfile.ZipFile [closed]>, file = 'Result/demo.xlsx'\nmode = 'w', compression = 8, allowZip64 = True\ncompresslevel = None\n\n    def __init__(self, file, mode=\"r\", compression=ZIP_STORED, allowZip64=True,\n                 compresslevel=None, *, strict_timestamps=True, metadata_encoding=None):\n        \"\"\"Open the ZIP file with mode read 'r', write 'w', exclusive create 'x',\n        or append 'a'.\"\"\"\n        if mode not in ('r', 'w', 'x', 'a'):\n            raise ValueError(\"ZipFile requires mode 'r', 'w', 'x', or 'a'\")\n    \n        _check_compression(compression)\n    \n        self._allowZip64 = allowZip64\n        self._didModify = False\n        self.debug = 0  # Level of printing: 0 through 3\n        self.NameToInfo = {}    # Find file info given name\n        self.filelist = []      # List of ZipInfo instances for archive\n        self.compression = compression  # Method of compression\n        self.compresslevel = compresslevel\n        self.mode = mode\n        self.pwd = None\n        self._comment = b''\n        self._strict_timestamps = strict_timestamps\n        self.metadata_encoding = metadata_encoding\n    \n        # Check that we don't try to write with nonconforming codecs\n        if self.metadata_encoding and mode != 'r':\n            raise ValueError(\n                \"metadata_encoding is only supported for reading files\")\n    \n        # Check if we were passed a file-like object\n        if isinstance(file, os.PathLike):\n            file = os.fspath(file)\n        if isinstance(file, str):\n            # No, it's a filename\n            self._filePassed = 0\n            self.filename = file\n            modeDict = {'r' : 'rb', 'w': 'w+b', 'x': 'x+b', 'a' : 'r+b',\n                        'r+b': 'w+b', 'w+b': 'wb', 'x+b': 'xb'}\n            filemode = modeDict[mode]\n            while True:\n                try:\n>                   self.fp = io.open(file, filemode)\nE                   PermissionError: [Errno 13] Permission denied: 'Result/demo.xlsx'\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\zipfile.py:1283: PermissionError"}, "attachments": [{"name": "stdout", "source": "6c8a2eba-0d31-4357-bdb6-802c84193cb5-attachment.txt", "type": "text/plain"}], "start": 1688282713682, "stop": 1688282741970, "uuid": "2b9c6992-fafe-4f29-a141-0bb188740678", "historyId": "173f4820c99f594230475c3d8bdf0f43", "testCaseId": "173f4820c99f594230475c3d8bdf0f43", "fullName": "TestCases.test_TC_001_Registration#test_TC001_Validate_Registration", "labels": [{"name": "parentSuite", "value": "TestCases"}, {"name": "suite", "value": "test_TC_001_Registration"}, {"name": "host", "value": "AD1000AD"}, {"name": "thread", "value": "9868-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.test_TC_001_Registration"}]}